# ========================================
# Gradle Version Catalog - AuthHub
# ========================================
# Central version management for all dependencies
# Usage: implementation(libs.spring.boot.starter.web)
# ========================================

[versions]
# ========================================
# Spring & Framework
# ========================================
springBoot = "3.4.1"  # 3.5.6은 Netty 의존성 충돌 문제로 인해 보류
springDependencyManagement = "1.1.7"

# ========================================
# Database & Persistence
# ========================================
querydsl = "5.1.0"
hibernate = "6.4.4.Final"
flyway = "10.10.0"
mysql = "8.0.33"
h2 = "2.2.224"
hikaricp = "5.1.0"

# ========================================
# Testing
# ========================================
junit = "5.10.2"
assertj = "3.25.3"
mockito = "5.11.0"
testcontainers = "1.19.7"
restAssured = "5.4.0"
awaitility = "4.2.0"

# ========================================
# Architecture & Quality
# ========================================
archunit = "1.2.1"
checkstyle = "10.14.0"
spotbugs = "4.8.3"
spotbugsPlugin = "6.0.9"
jacoco = "0.8.11"

# ========================================
# API Documentation
# ========================================
springdoc = "2.7.0"

# ========================================
# Logging & Monitoring
# ========================================
slf4j = "2.0.9"
logstashLogback = "7.4"
micrometer = "1.12.4"

# ========================================
# Resilience & Retry
# ========================================
springRetry = "2.0.5"
resilience4j = "2.2.0"

# ========================================
# Redis
# ========================================
# lettuce 버전은 Spring Boot BOM이 자동 관리

# ========================================
# Utilities
# ========================================
commonsLang3 = "3.14.0"
jackson = "2.17.0"

[libraries]
# ========================================
# Spring Boot Starters
# ========================================
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-starter-data-redis = { module = "org.springframework.boot:spring-boot-starter-data-redis" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }
spring-boot-configuration-processor = { module = "org.springframework.boot:spring-boot-configuration-processor" }

# ========================================
# Spring Framework
# ========================================
spring-context = { module = "org.springframework:spring-context" }
spring-tx = { module = "org.springframework:spring-tx" }
spring-test = { module = "org.springframework:spring-test" }
spring-security-test = { module = "org.springframework.security:spring-security-test" }

# ========================================
# QueryDSL
# ========================================
querydsl-jpa = { module = "com.querydsl:querydsl-jpa", version.ref = "querydsl" }
querydsl-apt = { module = "com.querydsl:querydsl-apt", version.ref = "querydsl" }
querydsl-apt-jakarta = { module = "com.querydsl:querydsl-apt", version.ref = "querydsl" }

# ========================================
# Database
# ========================================
mysql-connector = { module = "com.mysql:mysql-connector-j", version.ref = "mysql" }
h2 = { module = "com.h2database:h2", version.ref = "h2" }
hikaricp = { module = "com.zaxxer:HikariCP", version.ref = "hikaricp" }
flyway-core = { module = "org.flywaydb:flyway-core", version.ref = "flyway" }
flyway-mysql = { module = "org.flywaydb:flyway-mysql", version.ref = "flyway" }

# ========================================
# Testing
# ========================================
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
junit-platform-launcher = { module = "org.junit.platform:junit-platform-launcher" }
assertj-core = { module = "org.assertj:assertj-core", version.ref = "assertj" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockito-junit = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-mysql = { module = "org.testcontainers:mysql", version.ref = "testcontainers" }
rest-assured = { module = "io.rest-assured:rest-assured", version.ref = "restAssured" }
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }

# ========================================
# Architecture Testing
# ========================================
archunit-junit5 = { module = "com.tngtech.archunit:archunit-junit5", version.ref = "archunit" }

# ========================================
# Code Quality
# ========================================
spotbugs-annotations = { module = "com.github.spotbugs:spotbugs-annotations", version.ref = "spotbugs" }

# ========================================
# API Documentation
# ========================================
springdoc-openapi = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc" }
springdoc-openapi-starter-webmvc-ui = { module = "org.springdoc:springdoc-openapi-starter-webmvc-ui", version.ref = "springdoc" }

# ========================================
# Logging & Monitoring
# ========================================
logstash-logback-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstashLogback" }
micrometer-prometheus = { module = "io.micrometer:micrometer-registry-prometheus" }

# ========================================
# Resilience & Retry
# ========================================
spring-retry = { module = "org.springframework.retry:spring-retry", version.ref = "springRetry" }
resilience4j-spring-boot3 = { module = "io.github.resilience4j:resilience4j-spring-boot3", version.ref = "resilience4j" }
resilience4j-circuitbreaker = { module = "io.github.resilience4j:resilience4j-circuitbreaker", version.ref = "resilience4j" }
resilience4j-retry = { module = "io.github.resilience4j:resilience4j-retry", version.ref = "resilience4j" }
resilience4j-micrometer = { module = "io.github.resilience4j:resilience4j-micrometer", version.ref = "resilience4j" }

# ========================================
# Redis
# ========================================
# lettuce-core는 spring-boot-starter-data-redis에 포함되어 자동 관리됨

# ========================================
# Utilities
# ========================================
commons-lang3 = { module = "org.apache.commons:commons-lang3", version.ref = "commonsLang3" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310" }
jakarta-validation-api = { module = "jakarta.validation:jakarta.validation-api", version = "3.1.0" }
jakarta-persistence-api = { module = "jakarta.persistence:jakarta.persistence-api", version = "3.1.0" }
hibernate-validator = { module = "org.hibernate.validator:hibernate-validator", version = "8.0.1.Final" }

# ========================================
# Logging
# ========================================
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }

[bundles]
# ========================================
# Common Dependency Bundles
# ========================================
spring-web = [
    "spring-boot-starter-web",
    "spring-boot-starter-validation",
    "jackson-databind",
    "jackson-datatype-jsr310"
]

spring-data-jpa = [
    "spring-boot-starter-data-jpa",
    "hikaricp"
]

testing-basic = [
    "junit-jupiter",
    "assertj-core",
    "mockito-core",
    "mockito-junit"
]

testing-spring = [
    "spring-boot-starter-test",
    "spring-security-test"
]

testcontainers = [
    "testcontainers-junit",
    "testcontainers-mysql"
]

observability = [
    "spring-boot-starter-actuator",
    "logstash-logback-encoder"
]

resilience = [
    "spring-retry",
    "resilience4j-spring-boot3",
    "resilience4j-circuitbreaker",
    "resilience4j-retry",
    "resilience4j-micrometer"
]

[plugins]
# ========================================
# Gradle Plugins
# ========================================
spring-boot = { id = "org.springframework.boot", version.ref = "springBoot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "springDependencyManagement" }
spotbugs = { id = "com.github.spotbugs", version.ref = "spotbugsPlugin" }
